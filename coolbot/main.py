import logging
from typing import Dict

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from aiogram.types import CallbackQuery

# Initialize bot and dispatcher
API_TOKEN = "5861953499:AAHOSNaGSk9m2tQp1Ozz_vmARxT9HPh2xD4"
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Callback data
menu_cb = CallbackData("menu", "action")
back_cb = CallbackData("back", "main_menu")

# Menu items
menu_items: Dict[str, str] = {
    "program": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ üìö",
    "place": "–ú–µ—Å—Ç–æ üìç",
    "price": "–¶–µ–Ω–∞ üí∞",
    "question": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ü§î",
    "myact": "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É üìù",
}

# Inline keyboard
inline_keyboard = InlineKeyboardMarkup(row_width=2)
for action, description in menu_items.items():
    button = InlineKeyboardButton(description, callback_data=menu_cb.new(action=action))
    inline_keyboard.add(button)

# Back button
back_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=back_cb.new(main_menu="main")))

# Messages and button descriptions
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç! üòÉ –Ø –±–æ—Ç —à–∫–æ–ª—ã –∏—Å–∫—É—Å—Å—Ç–≤ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ CoolScool. "
    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
)


PROGRAM_MESSAGE = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ CoolScool üìö: ..."
PLACE_MESSAGE = "–ê–¥—Ä–µ—Å CoolScool üìç: Koh Phangan üå¥üåä"
PRICE_MESSAGE = "–¶–µ–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –≤ CoolScool üí∞: ..."
QUESTION_MESSAGE = "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû: ..."
MYACT_MESSAGE = "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ üìù: ..."

MYACT_MESSAGE = "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: ..."
DESCRIPTIONS = {
    "program": PROGRAM_MESSAGE,
    "place": PLACE_MESSAGE,
    "price": PRICE_MESSAGE,
    "question": QUESTION_MESSAGE,
    "myact": MYACT_MESSAGE,
}


@dp.message_handler(commands=['start', 'help'])
async def process_start_command(message: types.Message):
    """
    Handle the /start and /help commands
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.reply(WELCOME_MESSAGE, reply_markup=inline_keyboard)

@dp.callback_query_handler(menu_cb.filter())
async def process_callback_menu(callback_query: CallbackQuery, callback_data: dict):
    """
    Process menu callback
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    action = callback_data["action"]
    description = DESCRIPTIONS[action]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    message = await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                          message_id=callback_query.message.message_id,
                                          text=description,
                                          reply_markup=back_button)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤–∏—Å–µ—Ç—å
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(back_cb.filter(main_menu="main"))
async def process_callback_back_to_main(callback_query: CallbackQuery):
    """
    Process back callback to main menu
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    message = await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                          message_id=callback_query.message.message_id,
                                          text=WELCOME_MESSAGE,
                                          reply_markup=inline_keyboard)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤–∏—Å–µ—Ç—å
    await bot.answer_callback_query(callback_query.id)
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

